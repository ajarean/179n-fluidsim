#define GROUP_SIZE 256
#define MAX_DIM_GROUPS 1024
#define MAX_DIM_THREADS (GROUP_SIZE * MAX_DIM_GROUPS)

#pragma kernel Integrate // Use the force of each particle to move particle
#pragma kernel ComputeForces // Compute forces for each particle
#pragma kernel ComputeDensityPressure // Compute density/pressure for each particle
#pragma kernel HashParticles // Hash particles for optimization
#pragma kernel ClearCellOffsets
#pragma kernel CalculateCellOffsets
#pragma kernel BitonicSort


struct Particle {
    float pressure;
    float density;
    float3 currentForce;
    float3 velocity;
    float3 position;
    float3 colorVisual;
};

RWStructuredBuffer<Particle> _particles;

RWStructuredBuffer<uint> particleIndices;
RWStructuredBuffer<uint> particleCellIndices;
RWStructuredBuffer<uint> cellOffsets;


// Variable Declarations 

float particleMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
float radius;
float radius2;
float radius3;
float radius4;
float radius5;
float pi;
uint particleLength;
float timestep;
float3 boxSize;
float3 spherePos;
float sphereRadius;
int neighborColor;
int pressureColor;


int3 GetCell(float3 position) {
    int3 cellIndex;
    float3 halfBoxSize = boxSize / 2.0f;
    cellIndex.x = (int)((position.x + halfBoxSize.x) / radius);
    cellIndex.y = (int)((position.y + halfBoxSize.y) / radius);
    cellIndex.z = (int)((position.z + halfBoxSize.z) / radius);
    return cellIndex;
}


inline uint Hash(in int3 cellIndex)
{
  const uint p1 = 53781811; // some large primes
  const uint p2 = 77111777;
  const uint p3 = 24111859;
  int n = p1 * cellIndex.x ^ p2*cellIndex.y ^ p3*cellIndex.z;
  n %= particleLength;
  return n;
}

[numthreads(256,1,1)]
void HashParticles (uint3 id: SV_DISPATCHTHREADID) {
    uint particleIndex = particleIndices[id.x];
    _particles[id.x].colorVisual = 0;
    particleCellIndices[particleIndex] = Hash(GetCell(_particles[particleIndex].position));
}

[numthreads(256,1,1)]
void ClearCellOffsets (uint3 id: SV_DISPATCHTHREADID) {
    cellOffsets[id.x] = 9999999;
}

[numthreads(256,1,1)]
void CalculateCellOffsets (uint3 id: SV_DISPATCHTHREADID) {
    uint particleIndex = particleIndices[id.x]; 
    uint cellIndex = particleCellIndices[particleIndex]; 

    InterlockedMin(cellOffsets[cellIndex], id.x);
}

[numthreads(256,1,1)]
void Integrate (uint3 id: SV_DISPATCHTHREADID) {

    float3 vel = _particles[id.x].velocity + ((_particles[id.x].currentForce/particleMass)*timestep);
    _particles[id.x].position += vel * timestep;

    float3 topRight = boxSize/2;
    float3 bottomLeft = -boxSize/2;

    // Min Boundary
    if (_particles[id.x].position.x - radius < bottomLeft.x) {
        vel.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius;
    }
    if (_particles[id.x].position.y - radius < bottomLeft.y) {
       vel.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius;
    }
    if (_particles[id.x].position.z - radius < bottomLeft.z) {
       vel.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius;
    }

    // Max Boundary 
    if (_particles[id.x].position.x + radius > topRight.x) {
        vel.x *= boundDamping;
        _particles[id.x].position.x = topRight.x - radius;
    }
    if (_particles[id.x].position.y + radius > topRight.y) {
       vel.y *= boundDamping;
        _particles[id.x].position.y = topRight.y - radius;
    }
    if (_particles[id.x].position.z + radius > topRight.z) {
       vel.z *= boundDamping;
        _particles[id.x].position.z = topRight.z - radius;
    }

    if (distance(_particles[id.x].position, spherePos) + radius < sphereRadius) {
        vel *= boundDamping;
    }

    _particles[id.x].velocity = vel;

}

int block;
int dim;

#define GROUP_SIZE 256
#define MAX_DIM_GROUPS 1024
#define MAX_DIM_THREADS (GROUP_SIZE * MAX_DIM_GROUPS)

[numthreads(256,1,1)]
void BitonicSort(uint3 id : SV_DispatchThreadID) {
	uint i = id.x + id.y * MAX_DIM_THREADS;
	uint j = i^block; 
	
	if (j < i || i >= particleLength) 
		return;
	
	uint key_i = particleIndices[i];
	uint key_j = particleIndices[j];
	float value_i = particleCellIndices[key_i];
	float value_j = particleCellIndices[key_j];
	
	float diff = (value_i - value_j) * ((i&dim) == 0 ? 1 : -1);
	if (diff > 0) {
		particleIndices[i] = key_j;
		particleIndices[j] = key_i;
	}
}


float StdKernel (float distanceSquared) {
    float x = 1.0f - distanceSquared / radius2;
    return 315.f/ (64.f * pi * radius3) * x * x * x;
}

[numthreads(256,1,1)]
void ComputeDensityPressure (uint3 id: SV_DISPATCHTHREADID) {
  uint pIdx = particleIndices[id.x];

    float3 origin =_particles[pIdx].position;
    float sum = 0;
    int3 cellIndex = GetCell(_particles[pIdx].position);
    
    for(int i = -2; i <= 2; ++i){
      for(int j = -2; j <= 2; ++j){
        for(int k = -2; k <= 2; ++k){
          int3 neighborIndex = cellIndex + int3(i, j, k);
          uint flatNeighborIndex = Hash(neighborIndex);            
          uint neighborIt = cellOffsets[flatNeighborIndex];
          while(neighborIt != 9999999 && neighborIt < particleLength){
            uint particleIndexB = particleIndices[neighborIt];
            if(particleCellIndices[particleIndexB] != flatNeighborIndex){
                break; 
            }
            Particle pB = _particles[particleIndexB];
            float dist = distance(pB.position, origin);
            if (dist < radius * 2) {
              float3 diff = origin - pB.position;
              float distSqrd = dot(diff, diff);
              if(radius2*0.004 > distSqrd*0.004) {
                sum += StdKernel(distSqrd * 0.004);
              }
            }
            neighborIt++;
          }
        }
      }
    }
    _particles[pIdx].density = sum * particleMass + 0.000001f;
    _particles[pIdx].pressure = gasConstant * (_particles[pIdx].density - restDensity);
 if(pressureColor){
      float pres = 0.01 * (_particles[pIdx].density - restDensity);
      _particles[pIdx].colorVisual = float3(pres/100, pres/100, pres/100);
    }
}
    


// Smoothing Functions for Compute Forces
float SpikyKernelFirstDerivative (float distance) {
    float x = 1.0f - distance/radius;
    return -45.f/(pi*radius4)*x*x;
}

float SpikyKernelSecondDerivative (float distance) {
    float x = 1.0f - distance/radius;
    return 90.f / (pi*radius5)*x;
}

float3 SpikyKernelGradient (float distance, float3 direction) {
    return SpikyKernelFirstDerivative(distance)*direction;
}

[numthreads(256,1,1)]
void ComputeForces (uint3 id : SV_DISPATCHTHREADID) {

    uint pIdx = particleIndices[id.x];

    float3 origin = _particles[pIdx].position;
    float density2 = _particles[pIdx].density * _particles[pIdx].density;
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0,0,0); // To be calculated
    float3 visc = float3(0,0,0); // To be calculated 

    int3 cellIndex = GetCell(_particles[pIdx].position);
    
    if(neighborColor){
      _particles[0].colorVisual = float3(1.0, 0.0, 0.0);
    }
    for(int i = -2; i <= 2; ++i){
      for(int j = -2; j <= 2; ++j){
        for(int k = -2; k <= 2; ++k){
          int3 neighborIndex = cellIndex + int3(i, j, k);
          uint flatNeighborIndex = Hash(neighborIndex);            
          uint neighborIt = cellOffsets[flatNeighborIndex];
          while(neighborIt != 9999999 && neighborIt < particleLength){
            uint particleIndexB = particleIndices[neighborIt];
            if(particleCellIndices[particleIndexB] != flatNeighborIndex){
                break; 
            }
            Particle pB = _particles[particleIndexB];
            if(origin.x == pB.position.x && origin.y == pB.position.y && origin.z == pB.position.z){
              neighborIt++;
              continue;
            }

            if(pIdx == 0 && neighborColor){
              _particles[particleIndexB].colorVisual = float3(0.0,1.0,0.0);
            }
            float dist = distance(origin, pB.position);
            if (dist < radius * 2) {
            
                float3 pressureGradDir = normalize(_particles[pIdx].position - pB.position);
                float3 _pressureContrib = mass2 * SpikyKernelGradient(dist, pressureGradDir);
                _pressureContrib *= (pB.pressure / density2 + _particles[pIdx].pressure / (_particles[pIdx].density * _particles[pIdx].density));
                pressure += _pressureContrib;

                float3 _viscContrib = mass2 * viscosity * (pB.velocity - _particles[pIdx].velocity)/(pB.density+0.00001f);
                _viscContrib *= SpikyKernelSecondDerivative(dist);
                visc += _viscContrib;
            }
            neighborIt++;
          }
        }
      }
    }
    _particles[pIdx].currentForce = float3(0, -9.81 * particleMass, 0) - pressure + visc;
    float3 colDir = _particles[pIdx].position - spherePos;
    if (length(colDir) < sphereRadius) {
      _particles[pIdx].currentForce += colDir * 300;
    }
          
}

