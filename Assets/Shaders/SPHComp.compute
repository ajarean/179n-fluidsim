#pragma kernel Integrate
#pragma kernel ComputeDensityPrssure
#pragma kernel ComputeForces

struct Particle
{
    float3 position;
    float3 velocity;
    float3 currentForce;
    float pressure;
    float density;
};

// Particle buffer
RWStructuredBuffer<Particle> particlesBuffer;

float particleMass;
float radius;
float radius2;
float radius3;
float radius4;
float pi;
float gasConstant;
float viscosity;
float restDensity;
float boundDamp;
float timestep;
float3 box;
float3 spherePos;
float sphereRadius;
float collisionForceMod = 300.0f;


[numthreads(256,1,1)]
void Integrate (uint3 id : SV_DispatchThreadID){
    Particle* p = &particlesBuffer[id.x];
   float3 vel = p.velocity + ((p.currentForce/particleMass)* timestep);
    p.position += vel * timestep;


    float3 topRight = box/2;
    float3 bottomLeft = -box/2;

    if(p.position.x - radius < bottomLeft.x){
      vel.x *= boundDamp;
      p.position.x = bottomLeft.x + radius;
    }
    if(p.position.y - radius < bottomLeft.y){
      vel.y *= boundDamp;
      p.position.y = bottomLeft.y + radius;
    }
    if(p.position.z - radius < bottomLeft.z){
      vel.z *= boundDamp;
      p.position.z = bottomLeft.z + radius;
    }
    if(p.position.x + radius > topRight.x){
      vel.x *= boundDamp;
      p.position.x = topRight.x - radius;
    }
    if(p.position.y + radius > topRight.y){
      vel.y *= boundDamp;
      p.position.y = topRight.y - radius;
    }
    if(p.position.z + radius > topRight.z){
      vel.z *= boundDamp;
      p.position.z = topRight.z - radius;
    }
    if(distance(p.position, spherePos) + radius < sphereRadius){
      vel *= boundDamp;
    }
    p.velocity = vel;
}

float StdKernel (float distanceSqrd) {
  float x = 1.0f - distanceSqrd / radius2;
  return (315.0f / (64.0f * pi * radius3)) * x * x * x;
}

[numthreads(256,1,1)]
void ComputeDensityPrssure (uint3 id : SV_DispatchThreadID){
    Particle* p = &particlesBuffer[id.x];
    float3 origin = p.position;
    float density = 0.0f;
    for (int i = 0; i < particlesBuffer.Length; i++){
        Particle* other = &particlesBuffer[i];
        float3 diff = origin - other.position;
        float distanceSqrd = dot(diff, diff);
        if (distanceSqrd*0.004 < radius2*0.004 && distanceSqrd > 0.0f){
            density += particleMass* StdKernel(distanceSqrd*0.004);
        }
    }
    p.density = density + 0.00001f;
    p.pressure = gasConstant * (p.density - restDensity);
}

float SpikyKernelFirstDerivative (float distance) {
  float x =1.0f - distance/radius;
  return (-45.0f / (pi * radius4)) * x * x;
}
float SpikyKernelSecondDerivative (float distance) {
  float x =1.0f - distance/radius;
  return (90.0f / (pi * radius4)) * x;
}
float SpikyKernelGradient (float distance, float3 direction){
  return SpikyKernelFirstDerivative(distance) * direction;
}

[numthreads(256,1,1)]
void ComputeForces (uint3 id : SV_DispatchThreadID){
    Particle* p = &particlesBuffer[id.x];

    float3 origin = p.position;
    float density2 = p.density * p.density;
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0,0,0); //calc'd in function
    float3 visc = float3(0,0,0);

    for (int i = 0; i < particlesBuffer.Length; i++){ // implement neighbor search later
        Particle* other = &particlesBuffer[i];
        if (origin == other.position) continue; //dont check same point

        float dist  = distance(p.position, other.position);
        if(dist < radius*2){
          float3 pressureGradDir = normalize(p.position - other.position);
          float3 _pressureContrib = mass2 * SpikyKernelGradient(dist, pressureGradDir);
          _pressureContrib *= (p.pressure / density2  + other.pressure / (other.density * other.density));
          pressure += _pressureContrib;

          float3 _viscContrib = mass2 * viscosity * (other.velocity - p.velocity)/(p.density+0.00001f);
          _viscContrib *= SpikyKernelSecondDerivative(dist);
          visc += _viscContrib;

        }
    }
    float3 grav = float3(0, -9.81 * particleMass, 0);
    p.currentForce = grav - pressure + visc;
    float3 colDir = p.position - spherePos;
    if (length(colDir) < sphereRadius + radius) {
       p.currentForce += colDir * collisionForceMod;
    }
}